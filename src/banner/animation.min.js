var _gsScope = "undefined" != typeof module && module.exports && "undefined" != typeof global ? global : this || window;
(_gsScope._gsQueue || (_gsScope._gsQueue = [])).push(function () {
    "use strict";

    function e(e, t, a, n) {
        return a = parseFloat(a) - parseFloat(e), n = parseFloat(n) - parseFloat(t), Math.sqrt(a * a + n * n)
    }

    function t(e) {
        return "string" != typeof e && e.nodeType || (e = _gsScope.TweenLite.selector(e), e.length && (e = e[0])), e
    }

    function a(e, t, a) {
        var n, r, o = e.indexOf(" ");
        return -1 === o ? (n = void 0 !== a ? a + "" : e, r = e) : (n = e.substr(0, o), r = e.substr(o + 1)), n = -1 !== n.indexOf("%") ? parseFloat(n) / 100 * t : parseFloat(n), r = -1 !== r.indexOf("%") ? parseFloat(r) / 100 * t : parseFloat(r), n > r ? [r, n] : [n, r]
    }

    function n(a) {
        if (!a) return 0;
        a = t(a);
        var n, r, o, s, i, p, l, g, d = a.tagName.toLowerCase();
        if ("path" === d) i = a.style.strokeDasharray, a.style.strokeDasharray = "none", n = a.getTotalLength() || 0, r = a.getBBox(), a.style.strokeDasharray = i;
        else if ("rect" === d) r = a.getBBox(), n = 2 * (r.width + r.height);
        else if ("circle" === d) n = 2 * Math.PI * parseFloat(a.getAttribute("r"));
        else if ("line" === d) n = e(a.getAttribute("x1"), a.getAttribute("y1"), a.getAttribute("x2"), a.getAttribute("y2"));
        else if ("polyline" === d || "polygon" === d)
            for (o = a.getAttribute("points").split(" "), n = 0, i = o[0].split(","), "polygon" === d && (o.push(o[0]), -1 === o[0].indexOf(",") && o.push(o[1])), p = 1; p < o.length; p++) s = o[p].split(","), 1 === s.length && (s[1] = o[p++]), 2 === s.length && (n += e(i[0], i[1], s[0], s[1]) || 0, i = s);
        else "ellipse" === d && (l = parseFloat(a.getAttribute("rx")), g = parseFloat(a.getAttribute("ry")), n = Math.PI * (3 * (l + g) - Math.sqrt((3 * l + g) * (l + 3 * g))));
        return n || 0
    }

    function r(e, a) {
        if (!e) return [0, 0];
        e = t(e), a = a || n(e) + 1;
        var r = s(e),
            o = r.strokeDasharray || "",
            i = parseFloat(r.strokeDashoffset),
            p = o.indexOf(",");
        return 0 > p && (p = o.indexOf(" ")), o = 0 > p ? a : parseFloat(o.substr(0, p)) || 1e-5, o > a && (o = a), [Math.max(0, -i), Math.max(0, o - i)]
    }
    var o, s = document.defaultView ? document.defaultView.getComputedStyle : function () { };
    o = _gsScope._gsDefine.plugin({
        propName: "drawSVG",
        API: 2,
        version: "0.0.7",
        global: !0,
        overwriteProps: ["drawSVG"],
        init: function (e, t, o) {
            if (!e.getBBox) return !1;
            var s, i, p, l = n(e) + 1;
            return this._style = e.style, t === !0 || "true" === t ? t = "0 100%" : t ? -1 === (t + "").indexOf(" ") && (t = "0 " + t) : t = "0 0", s = r(e, l), i = a(t, l, s[0]), this._length = l + 10, 0 === s[0] && 0 === i[0] ? (p = Math.max(1e-5, i[1] - l), this._dash = l + p, this._offset = l - s[1] + p, this._addTween(this, "_offset", this._offset, l - i[1] + p, "drawSVG")) : (this._dash = s[1] - s[0] || 1e-6, this._offset = -s[0], this._addTween(this, "_dash", this._dash, i[1] - i[0] || 1e-5, "drawSVG"), this._addTween(this, "_offset", this._offset, -i[0], "drawSVG")), !0
        },
        set: function (e) {
            this._firstPT && (this._super.setRatio.call(this, e), this._style.strokeDashoffset = this._offset, 1 === e || 0 === e ? this._style.strokeDasharray = this._offset < .001 && this._length - this._dash <= 10 ? "none" : this._offset === this._dash ? "0px, 999999px" : this._dash + "px," + this._length + "px" : this._style.strokeDasharray = this._dash + "px," + this._length + "px")
        }
    }), o.getLength = n, o.getPosition = r
}), _gsScope._gsDefine && _gsScope._gsQueue.pop()();

import pngElements from './png-element.png';
import jpgElements from './jpg-element.jpg';
var jpgCanvasSpriteSheetData = {
    images: [jpgElements],
    frames: [
        [0, 0, 600, 1200]
    ]
},
    jpgCanvasSpriteSheet = new createjs.SpriteSheet(jpgCanvasSpriteSheetData),
    jpgCanvasSprites = [],
    jpgCanvasSprite0 = new createjs.Sprite(jpgCanvasSpriteSheet);
jpgCanvasSprite0.gotoAndStop(0), jpgCanvasSprites["start-image"] = jpgCanvasSprite0;
var pngCanvasSpriteSheetData = {
    images: [pngElements],
    frames: [
        [1212, 780, 554, 130],
        [1212, 916, 554, 130],
        [996, 606, 90, 178],
        [70, 1812, 62, 62],
        [1884, 1458, 18, 50],
        [1884, 1514, 16, 42],
        [1908, 1458, 18, 42],
        [1932, 1458, 12, 26],
        [1066, 964, 98, 20],
        [1212, 606, 454, 168],
        [0, 0, 600, 1200],
        [736, 992, 318, 20],
        [1212, 1126, 508, 30],
        [606, 846, 396, 30],
        [1212, 1162, 462, 30],
        [606, 1042, 92, 92],
        [1092, 606, 92, 92],
        [1598, 1100, 202, 20],
        [782, 1042, 202, 20],
        [1212, 1052, 380, 68],
        [1818, 0, 60, 1200],
        [894, 882, 274, 40],
        [962, 932, 200, 24],
        [942, 796, 200, 24],
        [606, 606, 384, 184],
        [736, 964, 324, 22],
        [606, 932, 350, 26],
        [0, 1812, 64, 72],
        [704, 1042, 72, 70],
        [1884, 1330, 20, 80],
        [1910, 1330, 20, 80],
        [1884, 1280, 54, 44],
        [1928, 1514, 10, 14],
        [1884, 1416, 30, 36],
        [1920, 1416, 16, 32],
        [1906, 1514, 16, 32],
        [1008, 846, 150, 20],
        [990, 1042, 150, 20],
        [1680, 1162, 98, 20],
        [1212, 0, 600, 600],
        [606, 0, 600, 600],
        [1212, 1206, 600, 600],
        [606, 1206, 600, 600],
        [0, 1206, 600, 600],
        [1884, 0, 60, 1200],
        [606, 964, 124, 72],
        [1672, 606, 100, 100],
        [1884, 1206, 60, 68],
        [1672, 712, 130, 52],
        [606, 796, 330, 44],
        [1598, 1052, 200, 42],
        [606, 882, 282, 44],
        [1092, 704, 72, 72]
    ]
},
    pngCanvasSpriteSheet = new createjs.SpriteSheet(pngCanvasSpriteSheetData),
    pngCanvasSprites = [],
    pngCanvasSprite0 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite0.gotoAndStop(0), pngCanvasSprites["arrows-desktop"] = pngCanvasSprite0;
var pngCanvasSprite1 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite1.gotoAndStop(1), pngCanvasSprites["arrows-mobile"] = pngCanvasSprite1;
var pngCanvasSprite2 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite2.gotoAndStop(2), pngCanvasSprites["blower-body"] = pngCanvasSprite2;
var pngCanvasSprite3 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite3.gotoAndStop(3), pngCanvasSprites["blower-spout"] = pngCanvasSprite3;
var pngCanvasSprite4 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite4.gotoAndStop(4), pngCanvasSprites["blower-tread"] = pngCanvasSprite4;
var pngCanvasSprite5 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite5.gotoAndStop(5), pngCanvasSprites["blower-wheel-shadow"] = pngCanvasSprite5;
var pngCanvasSprite6 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite6.gotoAndStop(6), pngCanvasSprites["blower-wheel"] = pngCanvasSprite6;
var pngCanvasSprite7 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite7.gotoAndStop(7), pngCanvasSprites["carousel-arrow"] = pngCanvasSprite7;
var pngCanvasSprite8 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite8.gotoAndStop(8), pngCanvasSprites.cta = pngCanvasSprite8;
var pngCanvasSprite9 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite9.gotoAndStop(9), pngCanvasSprites.drift = pngCanvasSprite9;
var pngCanvasSprite10 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite10.gotoAndStop(10), pngCanvasSprites['driveway'] = pngCanvasSprite10;
var pngCanvasSprite11 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite11.gotoAndStop(11), pngCanvasSprites["end-text-browse"] = pngCanvasSprite11;
var pngCanvasSprite12 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite12.gotoAndStop(12), pngCanvasSprites["end-text-nice-work"] = pngCanvasSprite12;
var pngCanvasSprite13 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite13.gotoAndStop(13), pngCanvasSprites["end-text-share-your-score"] = pngCanvasSprite13;
var pngCanvasSprite14 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite14.gotoAndStop(14), pngCanvasSprites["end-text-try-again"] = pngCanvasSprite14;
var pngCanvasSprite15 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite15.gotoAndStop(15), pngCanvasSprites["icon-facebook"] = pngCanvasSprite15;
var pngCanvasSprite16 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite16.gotoAndStop(16), pngCanvasSprites["icon-twitter"] = pngCanvasSprite16;
var pngCanvasSprite17 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite17.gotoAndStop(17), pngCanvasSprites["intro-cta-rollover"] = pngCanvasSprite17;
var pngCanvasSprite18 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite18.gotoAndStop(18), pngCanvasSprites["intro-cta"] = pngCanvasSprite18;
var pngCanvasSprite19 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite19.gotoAndStop(19), pngCanvasSprites["intro-text"] = pngCanvasSprite19;
var pngCanvasSprite20 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite20.gotoAndStop(20), pngCanvasSprites["left-snowdrift"] = pngCanvasSprite20;
var pngCanvasSprite21 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite21.gotoAndStop(21), pngCanvasSprites.logo = pngCanvasSprite21;
var pngCanvasSprite22 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite22.gotoAndStop(22), pngCanvasSprites["mid-cta-rollover"] = pngCanvasSprite22;
var pngCanvasSprite23 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite23.gotoAndStop(23), pngCanvasSprites["mid-cta"] = pngCanvasSprite23;
var pngCanvasSprite24 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite24.gotoAndStop(24), pngCanvasSprites["mid-text1"] = pngCanvasSprite24;
var pngCanvasSprite25 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite25.gotoAndStop(25), pngCanvasSprites["mid-text2"] = pngCanvasSprite25;
var pngCanvasSprite26 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite26.gotoAndStop(26), pngCanvasSprites["mid-text3"] = pngCanvasSprite26;
var pngCanvasSprite27 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite27.gotoAndStop(27), pngCanvasSprites.mitten = pngCanvasSprite27;
var pngCanvasSprite28 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite28.gotoAndStop(28), pngCanvasSprites.newspaper = pngCanvasSprite28;
var pngCanvasSprite29 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite29.gotoAndStop(29), pngCanvasSprites["person-arm-left"] = pngCanvasSprite29;
var pngCanvasSprite30 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite30.gotoAndStop(30), pngCanvasSprites["person-arm-right"] = pngCanvasSprite30;
var pngCanvasSprite31 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite31.gotoAndStop(31), pngCanvasSprites["person-body"] = pngCanvasSprite31;
var pngCanvasSprite32 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite32.gotoAndStop(32), pngCanvasSprites["person-foot"] = pngCanvasSprite32;
var pngCanvasSprite33 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite33.gotoAndStop(33), pngCanvasSprites["person-head"] = pngCanvasSprite33;
var pngCanvasSprite34 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite34.gotoAndStop(34), pngCanvasSprites["person-leg-left"] = pngCanvasSprite34;
var pngCanvasSprite35 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite35.gotoAndStop(35), pngCanvasSprites["person-leg-right"] = pngCanvasSprite35;
var pngCanvasSprite36 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite36.gotoAndStop(36), pngCanvasSprites["play-again-rollover"] = pngCanvasSprite36;
var pngCanvasSprite37 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite37.gotoAndStop(37), pngCanvasSprites["play-again"] = pngCanvasSprite37;
var pngCanvasSprite38 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite38.gotoAndStop(38), pngCanvasSprites.points = pngCanvasSprite38;
var pngCanvasSprite39 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite39.gotoAndStop(39), pngCanvasSprites["product-message"] = pngCanvasSprite39;
var pngCanvasSprite40 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite40.gotoAndStop(40), pngCanvasSprites.product1 = pngCanvasSprite40;
var pngCanvasSprite41 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite41.gotoAndStop(41), pngCanvasSprites.product2 = pngCanvasSprite41;
var pngCanvasSprite42 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite42.gotoAndStop(42), pngCanvasSprites.product3 = pngCanvasSprite42;
var pngCanvasSprite43 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite43.gotoAndStop(43), pngCanvasSprites.product4 = pngCanvasSprite43;
var pngCanvasSprite44 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite44.gotoAndStop(44), pngCanvasSprites["right-snowdrift"] = pngCanvasSprite44;
var pngCanvasSprite45 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite45.gotoAndStop(45), pngCanvasSprites.score = pngCanvasSprite45;
var pngCanvasSprite46 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite46.gotoAndStop(46), pngCanvasSprites.snow_poof_1 = pngCanvasSprite46;
var pngCanvasSprite47 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite47.gotoAndStop(47), pngCanvasSprites.snowflake = pngCanvasSprite47;
var pngCanvasSprite48 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite48.gotoAndStop(48), pngCanvasSprites["start-text1"] = pngCanvasSprite48;
var pngCanvasSprite49 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite49.gotoAndStop(49), pngCanvasSprites["start-text2"] = pngCanvasSprite49;
var pngCanvasSprite50 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite50.gotoAndStop(50), pngCanvasSprites["start-text3"] = pngCanvasSprite50;
var pngCanvasSprite51 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite51.gotoAndStop(51), pngCanvasSprites["start-text4"] = pngCanvasSprite51;
var pngCanvasSprite52 = new createjs.Sprite(pngCanvasSpriteSheet);
pngCanvasSprite52.gotoAndStop(52), pngCanvasSprites.timer = pngCanvasSprite52;




var maintl
maintl = new TimelineMax();

window.onload = function () {
    everything();
}

// function adVisible() {
//     everything();  
// };

var points = {
    points: 0,
    displayPoints: 0
};
var scoreDisplay = document.querySelector('.score .score-text');
var playAgainPointsDisplay = document.querySelector('.play-again-points-text');
var pointCardDisplay = document.querySelector('.points-card .points-text');

var trail = [];
var speed = 4.2;
var targetX = 254;
var gameElementExpire = 50;
var gameElementTimer = 0;

var spoutParticles = [];
var gameElements = [];
var gameElementContainer = document.querySelector('.gameElements');
var snowCanvas = document.querySelector('.snow');
var snowCanvasStage = new createjs.Stage(snowCanvas);

var moveLeft = false;
var moveRight = false;

var playerAngle = 0;
var playerTLPosition = { seekPosition: 0 }

var productsArray;
var carouselButtonsArray;

var totalTime = 30; //30;
var displayTime = document.querySelector('.clock-container .time-text');;
var gameStarted = false;
var gameEnded = false;

var drivewayMask;
var dmContext; // NOT WORKING

var touching = false;
var autoScroll = false;

// -- <ASSET SET UP START> -- \\

// Start-Frame Setup
// TweenMax.set('.start-frame', { autoAlpha: 0 }); // HIDE FOR DEVELOPMENT
// TweenMax.set('.mid-frame', {autoAlpha: 0 });
// TweenMax.set('.game-frame', {autoAlpha: 0 });
TweenMax.set('.end-frame', { x: -300 });
TweenMax.set('.footer', { autoAlpha: 0 });


// Mid-Frame Setup
TweenMax.set('.drift', { scale: .4, x: 25, y: 132 });
TweenMax.set('.snowflake', { scale: .9, x: 52, y: 156 });
TweenMax.set('.newspaper', { scale: .9, x: 75, y: 225 });
TweenMax.set('.mitten', { scale: .9, x: 119, y: 225 });

// Game-Frame Setup
TweenMax.set('.player', { x: 127 });
TweenMax.set('.arrows', { autoAlpha: 0, y: 10 });
TweenMax.set('.score, .clock-container', { y: -50 });

// SNOWFLAKES
var stage = document.querySelector('.stage');
var amount = 50;
var s_width = 300;
var s_height = 600;
var speed = 5;

function spawnSnowFlake(oldFlake) {
    var flake = oldFlake;
    var newX1 = (Math.random() * (s_width * 1.5)) - (s_width * .25);
    var newX2 = (Math.random() * (s_width * 2)) - (s_width * .5);
    var newSpeed = speed + (Math.random() * 2) - 1;
    TweenMax.set(flake, { x: newX1, y: 0 });
    TweenMax.to(flake, newSpeed, { x: newX2, y: s_height, ease: Power0.easeNone, onComplete: spawnSnowFlake, onCompleteParams: [flake] });
}

function initSnowFlakes() {
    for (var i = 0; i <= amount; i++) {
        var flake = document.createElement("div");
        flake.classList.add("sflake");
        stage.appendChild(flake);
        var scale = (Math.random() * .8 + .3);
        var _x1 = Math.random() * s_width;
        var _y = (Math.random() * s_height);
        var duration = speed * ((s_height - _y) / s_height);
        var _x2 = Math.random() * s_width;
        TweenMax.set(flake, { scale: scale, x: _x1, y: _y });
        TweenMax.to(flake, duration, { y: s_height, x: _x2, ease: Power0.easeNone, onComplete: spawnSnowFlake, onCompleteParams: [flake] })
    }
}

initSnowFlakes();

// -- <ASSET SET UP END> -- \\


var plowClearingSquare;
var drivewayMaskStage;
var maskThings;




// -- <DETECT FOR TOUCH OR DESKTOP> -- \\
var myEvent = ('ontouchstart' in document.documentElement) ? 'touchend' : 'click';
console.log("myEvent: " + myEvent)
if (myEvent == 'touchend') {
    // Mobile
    TweenMax.set(".arrows-mobile", { autoAlpha: 1 });
    TweenMax.set(".arrows-desktop", { autoAlpha: 0 });
} else {
    // Desktop
    TweenMax.set(".arrows-mobile", { autoAlpha: 0 });
    TweenMax.set(".arrows-desktop", { autoAlpha: 1 });
}




// -- <SWIPE FUNCTIONS> -- \\
var swipeFunc = {
    touches: {
        "touchstart": { "x": -1, "y": -1 },
        "touchmove": { "x": -1, "y": -1 },
        "touchend": false,
        "direction": "undetermined"
    },
    touchHandler: function (event) {
        var touch;
        if (gameEnded) {
            return
        }
        if (typeof event !== 'undefined') {
            event.preventDefault();
            if (typeof event.touches !== 'undefined') {
                touch = event.touches[0];
                switch (event.type) {
                    case 'touchstart':
                        touching = true;

                    case 'touchmove':
                        swipeFunc.touches[event.type].x = touch.pageX;
                        swipeFunc.touches[event.type].y = touch.pageY;
                        break;
                    case 'touchend':
                        touching = false;
                        if (gameStarted && !gameEnded) {
                            moveLeft = false;
                            moveRight = false;
                            TweenMax.to('.arrows', .5, { autoAlpha: 0, y: 10 });
                        }
                    // swipeFunc.touches[event.type] = true;
                    // console.log("X:", swipeFunc.touches.touchstart.x);
                    // if (swipeFunc.touches.touchstart.x > -1 && swipeFunc.touches.touchmove.x > -1) {
                    //     swipeFunc.touches.direction = swipeFunc.touches.touchstart.x < swipeFunc.touches.touchmove.x ? "right" : "left";
                    //     if (gameStarted && !gameEnded) {
                    //         if (swipeFunc.touches.direction == "right") {
                    //             console.log("right");

                    //         } else {
                    //             console.log("left");
                    //         }
                    //     }
                    //     TweenMax.to('.arrows', .5, { autoAlpha: 0, y: 10 });
                    // }
                    default:
                        break;
                }
            }
        }
    },
    init: function () {
        document.querySelector('.stage').addEventListener('touchstart', swipeFunc.touchHandler, false);
        document.querySelector('.stage').addEventListener('touchmove', swipeFunc.touchHandler, false);
        document.querySelector('.stage').addEventListener('touchend', swipeFunc.touchHandler, false);
    }
};
swipeFunc.init();

function checkTouchUpdate() {
    if (touching) {
        var checkSide = swipeFunc.touches.touchstart.x
        console.log("TOUCHING!", checkSide)
        if (checkSide < 150) {
            // targetX -=3;
            moveLeft = true;
        }
        if (checkSide > 150) {
            // targetX +=3;
            moveRight = true;
        }
    } else {

    }
}




function everything() {
    console.log("everything");
    initPlayerLoopTimeline(); // NEED TO TURN INTO A CONTROLLABLE TIMELINE AT SOME POINT

    var playerTurnTL = initPlayerTimeline();

    drivewayMask = document.querySelector('.drivewaymask');
    TweenMax.set(drivewayMask, { scale: .5, transformOrigin: "0% 0%" });
    drivewayMaskStage = new createjs.Stage(drivewayMask);
    dmContext = drivewayMask.getContext('2d');

    maskThings = new createjs.Container();
    drivewayMaskStage.addChild(maskThings);

    var drivewayTileContainer = new createjs.Container();
    drivewayMaskStage.addChild(drivewayTileContainer);

    plowClearingSquare = new createjs.Shape();
    plowClearingSquare.graphics.f("#ffbc33").rect(0, 0, 90, 40);
    plowClearingSquare.x = 254; //30;
    plowClearingSquare.y = 820;
    maskThings.addChild(plowClearingSquare);

    var drivewayTile1 = Object.create(pngCanvasSprites['driveway']);
    var drivewayTile2 = Object.create(pngCanvasSprites['driveway']);
    drivewayTile1.compositeOperation = "source-atop";
    drivewayTile2.compositeOperation = "source-atop";
    drivewayTile2.y = 1200;
    drivewayTileContainer.addChild(drivewayTile1);
    drivewayTileContainer.addChild(drivewayTile2);

    maintl
        .add("frame0", 0)
        .to('.stage', .05, { autoAlpha: 1 })

        .add("frame1", "+=.5")
        .staggerFrom('.start-text', .75, { x: 300, ease: Power3.easeOut }, .5, "frame1")
        .staggerFrom('.start-box', .75, { x: 300, ease: Power3.easeOut }, .5, "frame1")
        .from('.start-box34, .start-text34', .75, { x: 300, ease: Power3.easeOut }, "frame1+=1")
        .from('.intro-box', 1, { y: 600, ease: Power3.easeOut }, "frame1+=1.5")
        .seek(0);





    function tick() {
        if (gameStarted && !gameEnded) {

            gameElementTimer++;
            if (gameElementTimer >= gameElementExpire) {
                gameElementTimer = 0;
                gameElementExpire = 40 + Math.random() * 20;
                spawnGameElement();
            }

            updateSpoutParticles();
            updateGameElements();
            checkTouchUpdate();


            var trailer = plowClearingSquare.clone(true);
            maskThings.addChild(trailer);
            trail.push(trailer);
            drivewayMaskStage.update();

            if (moveLeft) {
                targetX -= 3; // 3
                if (targetX < 20) {
                    targetX = 20;
                }
                playerAngle -= 1;
                if (playerAngle < -33) {
                    playerAngle = -33;
                }
            } else {
                if (playerAngle < 0) {
                    playerAngle += 1;
                }
            }
            if (moveRight) {
                targetX += 3; // 3
                if (targetX > 490) {
                    targetX = 490;
                }
                playerAngle += 1;
                if (playerAngle > 33) {
                    playerAngle = 33;
                }
            } else {
                if (playerAngle > 0) {
                    playerAngle -= 1;
                }
            }
            if (targetX < 30 && playerAngle < 0) {
                playerAngle += 1.5;
                if (playerAngle > 0) {
                    playerAngle = 0
                }
            }
            if (targetX > 460 && playerAngle > 0) {
                playerAngle -= 1.5;
                if (playerAngle < 0) {
                    playerAngle = 0
                }
            }
            plowClearingSquare.x += ((targetX - plowClearingSquare.x) * .2)
            TweenMax.set('.player', { x: plowClearingSquare.x / 2, rotation: playerAngle, transformOrigin: "50% 15px" })

            drivewayTileContainer.y += speed;
            if (drivewayTileContainer.y > 0) {
                drivewayTileContainer.y -= 1200;
            }

            var i = trail.length
            while (i--) {
                var trailItem = trail[i];
                trailItem.y += speed;
                if (trailItem.y > 1300) {
                    trail.splice(i, 1);
                    maskThings.removeChild(trailItem);
                    delete trailItem;
                }
            }
            playerTurnTL.seek(playerTLPosition.seekPosition);

            TweenMax.set(".kb1", { x: targetX / 2 - 18 });
            TweenMax.set(".kb2", { x: targetX / 2 });

            //WALK CYCLE
            var getCyclePosition = walkCycleTL.seekPosition;
            if (walkCycleSeek > 2) {
                walkCycleSeek -= 2;
            } else {
                walkCycleSeek += 1 / 60;
            }
            walkCycleTL.seek(walkCycleSeek);
        }

    }
    createjs.Ticker.setFPS(60);
    createjs.Ticker.addEventListener('tick', tick);
    createjs.Ticker.init();
    initPlayerControls(playerTurnTL);
    setupCarousel();
}



// -------------- <GAME PLAY FUNCTIONS - START> -------------- \\
function spawnGameElement() {
    var newElement = document.createElement('div');
    // newspaper, mitten, snowflake, drift
    var newClass = '';
    var randomized = Math.random();
    if (randomized < .5) {
        TweenMax.set(newElement, {
            y: -100,
            x: 50 + Math.random() * 200
        });
        newClass = 'snowflake'
    } else if (randomized >= .5 && randomized < .6) {
        TweenMax.set(newElement, {
            y: -100,
            x: 50 + Math.random() * 200
        });
        newClass = 'mitten'
    } else if (randomized >= .6 && randomized < .9) {
        TweenMax.set(newElement, {
            y: -100,
            x: 50 + Math.random() * 200
        });
        newClass = 'newspaper'
    } else if (randomized >= .9) {
        newClass = 'drift'
        if (Math.random() > .5) {
            TweenMax.set(newElement, {
                y: -100,
                x: 180 + Math.random() * 10
            });
        } else {
            TweenMax.set(newElement, {
                y: -100,
                x: -90 - Math.random() * 30
            });

        }
    }
    newElement.classList.add('png-element');
    newElement.classList.add(newClass);
    gameElements.push(newElement);
    newElement.collectionChecked = false;
    newElement.elementType = newClass;
    gameElementContainer.appendChild(newElement);
}



function updateGameElements() {
    var i = gameElements.length
    while (i--) {
        var gameElement = gameElements[i];
        TweenMax.set(gameElement, {
            y: "+=" + speed * .5
        });

        // If game element is above the plow and is NOT COLLECTED...
        if (gameElement._gsTransform.y > 400 && !gameElement.collectionChecked) {

            // ... CollectionCheck it!
            gameElement.collectionChecked = true;
            // console.log('checking Element', gameElement.elementType)

            // ... Set the element's Left-side and Right-side default collision boundaries...
            var elementRange = {
                left: gameElement._gsTransform.x - 33,
                right: gameElement._gsTransform.x
            }

            // Adjust any specific element boundaries here:
            if (gameElement.elementType === 'drift') {
                elementRange.right += 250;
            }
            if (gameElement.elementType === 'newspaper') {
                elementRange = {
                    left: gameElement._gsTransform.x - 45,
                    right: gameElement._gsTransform.x + 20
                } //KEEP
            }
            if (gameElement.elementType === 'mitten') {
                elementRange = {
                    left: gameElement._gsTransform.x - 45,
                    right: gameElement._gsTransform.x + 15
                }
            }
            if (gameElement.elementType === 'snowflake') {
                elementRange = {
                    left: gameElement._gsTransform.x - 45,
                    right: gameElement._gsTransform.x + 10
                }
            }
            // Set the Snow Plows Left-side and Right-side collision boundaries
            var snowPlowCollectRange = {
                left: targetX / 2 - 18,
                right: targetX / 2
            } // ORIGINAL

            // If the Element and Snow Plow boundaries overlap...
            if (elementRange.left < snowPlowCollectRange.right && elementRange.right > snowPlowCollectRange.left) {

                // ...the element is collected...
                // console.log(gameElement.elementType, 'collected');

                // ... if the element is NOT a Drift,
                if (gameElement.elementType !== 'drift') {

                    // ... Remove it from the Game Elements Array...
                    gameElements.splice(i, 1);
                }

                // Score the element so it will be removed from the stage
                scoreTheElement(gameElement);
                // gameElement.remove();
                // delete gameElement;
            }
        }
        // Once ANY element is off the screen, remove it from the stage
        if (gameElement._gsTransform.y > 600) {
            gameElements.splice(i, 1);
            gameElement.remove();
            delete gameElement;
        }
    }
}

function scoreTheElement(anElement) {
    var newX;
    var newY;
    var newRotation;
    var pointValue;
    var pointsCard = document.querySelector('.points-card');
    gameElementContainer.appendChild(anElement);

    // Snowflake (+10 points)
    // Drift (+100 points)
    // Mitten (-25 points)
    // Newspaper (-50 points)

    switch (anElement.elementType) {
        case "drift":
            pointValue = 100;
            points.points += pointValue;
            break;

        case "newspaper":
            pointValue = -50;
            points.points -= 50;
            newX = (Math.random() * -50) - 25;
            newY = (Math.random() * -50) - 50;
            newRotation = (Math.random() * 1080) + 360;
            TweenMax.to(anElement, .75, { x: newX, y: newY, scale: 3, rotation: newRotation });
            TweenMax.to(anElement, .25, {
                autoAlpha: 0, delay: .5, onComplete: function () {
                    anElement.remove();
                    delete anElement;
                }
            });
            break;

        case "mitten":
            pointValue = -25;
            points.points -= 25;
            newX = (Math.random() * -50) - 25;
            newY = (Math.random() * -50) - 50;
            newRotation = (Math.random() * 1080) + 360;
            TweenMax.to(anElement, .75, { x: newX, y: newY, scale: 3, rotation: newRotation });
            TweenMax.to(anElement, .25, {
                autoAlpha: 0, delay: .5, onComplete: function () {
                    anElement.remove();
                    delete anElement;
                }
            });
            break;

        case "snowflake":
            pointValue = 10;
            points.points += pointValue;
            TweenMax.to(anElement, .35, {
                autoAlpha: 0, delay: .3, ease: Back.easeIn, onComplete: function () {
                    anElement.remove();
                    delete anElement;
                }
            });
            TweenMax.to(anElement, .5, { scale: 3, rotation: 60, ease: Back.easeOut });
            TweenMax.to(anElement, .5, { y: "-=100", ease: Power3.easeOut });
            break;
    }
    if (pointValue < 0) {
        pointCardDisplay.innerHTML = pointValue.toString();
        pointCardDisplay.innerText = pointValue.toString();
        pointCardDisplay.style.display = 'none';
        pointCardDisplay.style.offsetHeight;
        pointCardDisplay.style.display = '';
        pointsCard.classList.add('bad-points');
    } else {
        pointCardDisplay.innerHTML = "+" + pointValue.toString();
        pointCardDisplay.innerText = "+" + pointValue.toString();
        pointCardDisplay.style.display = 'none';
        pointCardDisplay.style.offsetHeight;
        pointCardDisplay.style.display = '';
        pointsCard.classList.remove('bad-points');
    }
    TweenMax.killDelayedCallsTo(clearPointsCard);
    // TweenMax.fromTo('.points-card', .5, { autoAlpha: 0, y: 20 }, { autoAlpha: 1, y: 0, ease: Power2.easeOut });
    TweenMax.fromTo(pointsCard, .5, { autoAlpha: 0, y: 20 }, { autoAlpha: 1, y: 0, ease: Power2.easeOut });
    TweenMax.delayedCall(1, clearPointsCard)
    TweenMax.to(points, .5, {
        displayPoints: points.points, onUpdate: function () {
            scoreDisplay.innerHTML = Math.floor(points.displayPoints);
            scoreDisplay.innerText = Math.floor(points.displayPoints);
            scoreDisplay.style.display = 'none';
            scoreDisplay.style.offsetHeight;
            scoreDisplay.style.display = '';

            playAgainPointsDisplay.innerHTML = Math.floor(points.displayPoints);
            playAgainPointsDisplay.innerText = Math.floor(points.displayPoints);
            playAgainPointsDisplay.style.display = 'none';
            playAgainPointsDisplay.style.offsetHeight;
            playAgainPointsDisplay.style.display = '';
        }
    })
}

function clearPointsCard() {
    TweenMax.to('.points-card', .25, {
        autoAlpha: 0,
        ease: Power2.easeIn
    });
}

function initSpoutParticles() {

}

function updateSpoutParticles() {
    var i = spoutParticles.length
    while (i--) {
        var particle = spoutParticles[i];
        particle.x += particle.vx;
        particle.y += particle.vy;
        particle.vy += particle.ay;
        particle.age += 1;
        if (particle.age > 30) {
            spoutParticles.splice(i, 1);
            snowCanvasStage.removeChild(particle);
            delete particle;
        }
    }
    snowCanvasStage.update();
    spawnSpoutParticle();
    spawnSpoutParticle();
    spawnSpoutParticle();
}

function spawnSpoutParticle() {
    if (gameStarted) {
        var spoutLocation = document.querySelector('.blower-spout').getBoundingClientRect()
        var stageLocation = document.querySelector('.stage').getBoundingClientRect()
        spoutLocation.x -= stageLocation.x
        spoutLocation.y -= stageLocation.y

        var newParticle = new createjs.Shape();
        var color = Math.floor(Math.random() * 70 + 185);
        newParticle.graphics.f("rgb(" + color + "," + color + "," + color + ")").rect(0, 0, 3 + Math.random() * 2, 3 + Math.random() * 2);
        newParticle.x = spoutLocation.x + 13 + playerAngle * .1;
        newParticle.y = spoutLocation.y + 5 - playerAngle * .1;
        newParticle.vx = -5 + Math.random() + playerAngle * .1;
        newParticle.vy = -Math.random() * 4.5 - playerAngle * .1;
        newParticle.ay = Math.random() * .1;
        newParticle.age = 0;
        spoutParticles.push(newParticle)
        snowCanvasStage.addChild(newParticle)
    }


}


function initRoadLoopTimeline() {
    roadLoopTL = new TimelineMax();
    roadLoopTL.to('.road .png-element', 5, { repeat: -1, ease: Power0.easeNone, y: 600 }, 0)
}


var walkCycleTL;
var walkCycleSeek = (1 / 60);


function initPlayerLoopTimeline() {

    // FULL WALK CYCLE
    walkCycleTL = new TimelineMax();
    walkCycleTL
        .add("frame0", 0)
        .to('.blower-tread', .333, { y: -6, ease: Power0.easeNone, repeat: 6 }, "frame0")
        .to('.poof_1', 1, { rotation: 360, ease: Power0.easeNone, repeat: 1 }, "frame0")
        .to('.poof_2', 1, { rotation: -360, ease: Power0.easeNone, repeat: 1 }, "frame0")
        .to('.poof_3', 2, { rotation: -360, ease: Power0.easeNone, repeat: 0 }, "frame0")
        .to('.full-leg-left', .5, { y: -10, yoyo: true, ease: Power1.easeInOut, repeat: 4, transformOrigin: "50% 100%" }, "frame0")
        .to('.person-foot-left', .5, { y: -3, yoyo: true, ease: Power1.easeInOut, repeat: 4, transformOrigin: "50% 100%" }, "frame0")
        .to('.full-leg-right', .5, { y: 10, yoyo: true, ease: Power1.easeInOut, repeat: 4, transformOrigin: "50% 100%" }, "frame0")
        .to('.person-foot-right', .5, { y: 3, yoyo: true, ease: Power1.easeInOut, repeat: 4, transformOrigin: "50% 100%" }, "frame0")
        .stop();
}

function initPlayerTimeline() {

    playerTurnTL = new TimelineMax();

    playerTurnTL

        .add("left", 0)
        .to('.snow-blower', .5, { rotation: -15, ease: Power1.easeInOut, transformOrigin: "50% 60" }, "left")
        .to('.person', .5, { x: 25, y: -3, rotation: 10, ease: Power1.easeInOut, transformOrigin: "50% 0%" }, "left")
        .to('.person-arm-left', .5, { scaleY: .8, ease: Power1.easeInOut, transformOrigin: "50% 100%" }, "left")
        .to('.person-arm-left', .5, { rotation: 2, ease: Power1.easeInOut, transformOrigin: "50% 100%" }, "left")
        .to('.person-arm-right', .5, { scaleY: 1.05, ease: Power1.easeInOut, transformOrigin: "50% 100%" }, "left")
        .to('.person-arm-right', .5, { rotation: -2, ease: Power1.easeInOut, transformOrigin: "50% 100%" }, "left")

        .add("center", .5)
        .to('.snow-blower', .5, { rotation: 0, ease: Power1.easeInOut, transformOrigin: "50% 60%" }, "center")
        .to('.person', .5, { x: 0, y: 0, rotation: 0, ease: Power1.easeInOut, transformOrigin: "50% 0%" }, "center")
        .to('.person-arm-left', .5, { scaleY: 1, rotation: 0, ease: Power1.easeInOut, transformOrigin: "50% 100%" }, "center")
        .to('.person-arm-right', .5, { scaleY: 1, rotation: 0, ease: Power1.easeInOut, transformOrigin: "50% 100%" }, "center")

        .add("right", 1)
        .to('.snow-blower', .5, { rotation: 15, ease: Power1.easeInOut, transformOrigin: "50% 60%" }, "right")
        .to('.person', .5, { x: -25, y: -3, rotation: -10, ease: Power1.easeInOut, transformOrigin: "50% 0%" }, "right")
        .to('.person-arm-right', .5, { scaleY: .8, ease: Power1.easeInOut, transformOrigin: "50% 100%" }, "right")
        .to('.person-arm-right', .5, { rotation: 2, ease: Power1.easeInOut, transformOrigin: "50% 100%" }, "right")
        .to('.person-arm-left', .5, { scaleY: 1.05, ease: Power1.easeInOut, transformOrigin: "50% 100%" }, "right")
        .to('.person-arm-left', .5, { rotation: -2, ease: Power1.easeInOut, transformOrigin: "50% 100%" }, "right")

        .add("center2", 1.5)
        .to('.snow-blower', .5, { rotation: 0, ease: Power1.easeInOut, transformOrigin: "50% 60%" }, "center2")
        .to('.person', .5, { x: 0, y: 0, rotation: 0, ease: Power1.easeInOut, transformOrigin: "50% 0%" }, "center2")
        .to('.person-arm-left', .5, { scaleY: 1, rotation: 0, ease: Power1.easeInOut, transformOrigin: "50% 100%" }, "center2")
        .to('.person-arm-right', .5, { scaleY: 1, rotation: 0, ease: Power1.easeInOut, transformOrigin: "50% 100%" }, "center2")

        .stop();

    return playerTurnTL
}

function initPlayerControls(playerTurnTL) {
    document.onkeydown = keyDown;

    function keyDown(e) {
        e = e || window.event;
        TweenMax.to('.arrows', .5, { autoAlpha: 0, y: 10 });
        if (e.keyCode == '37' || e.keyCode == '65') {
            if (!moveLeft) {
                TweenMax.fromTo(playerTLPosition, .7, { seekPosition: 0 }, { seekPosition: 1 })
            }
            moveLeft = true;
        } else if (e.keyCode == '39' || e.keyCode == '68') {
            if (!moveRight) {
                TweenMax.fromTo(playerTLPosition, .7, { seekPosition: 1 }, { seekPosition: 2 })
            }
            moveRight = true;
        } else if (e.keyCode == '38') {

        } else if (e.keyCode == '40') {

        }
    }
    document.onkeyup = keyUp;

    function keyUp(e) {
        if (e.keyCode == '37' || e.keyCode == '65') {
            moveLeft = false;
        } else if (e.keyCode == '39' || e.keyCode == '68') {
            moveRight = false;
        }
    }
}





// ---------- <START / FINISH> ---------- \\ 
function startGame() {
    if (gameStarted) {
        return;
    }
    console.log("START GAME!")
    gameStarted = true;
    TweenMax.delayedCall(1, startTimer)
    initRoadLoopTimeline();
    // initSpoutParticles();
    // TweenMax.set('.player', { autoAlpha: 1 , delay: .01 });
    // TweenMax.fromTo('.player', 1, { y: 200 }, { y: 0 , ease: Power2.easeOut });
    TweenMax.to('.arrows', .5, { y: 0, autoAlpha: 1 });
    TweenMax.fromTo('.score, .clock-container', .5, { y: -50 }, { y: 0, ease: Power1.easeOut });
    // TweenMax.to('.clock_gray', 30, { drawSVG: '0% 100%', ease: Power0.easeNone, onComplete: finishGame});
    // TweenMax.to('.clock_red', 1, { drawSVG: '0% -100%', ease: Power0.easeNone, repeat: -1});
}

function startTimer() {
    console.log("--startTimer--")
    totalTime = 30;
    displayTime.innerHTML = totalTime;
    displayTime.innerText = totalTime;
    displayTime.style.display = 'none';
    displayTime.style.offsetHeight;
    displayTime.style.display = '';
    updateTime();
}

function updateTime() {
    totalTime -= 1;
    if (totalTime <= 0) {
        totalTime = 0;
        TweenMax.killDelayedCallsTo(updateTime)
        finishGame();
    } else {
        TweenMax.delayedCall(1, updateTime)
    }
    displayTime.innerHTML = totalTime;
    displayTime.innerText = totalTime;
    displayTime.style.display = 'none';
    displayTime.style.offsetHeight;
    displayTime.style.display = '';
    console.log("updateTime-totalTime:", totalTime, displayTime)
}

function finishGame() {
    console.log("FINISH GAME!")
    currentProduct = 0;
    gameStarted = false;
    gameEnded = true;
    autoScroll = true;

    // Fix display when no points are scored and show a zero
    if (playAgainPointsDisplay.innerHTML == "") {
        playAgainPointsDisplay.innerHTML = "0";
        playAgainPointsDisplay.innerText = "0";
        playAgainPointsDisplay.style.display = 'none';
        playAgainPointsDisplay.style.offsetHeight;
        playAgainPointsDisplay.style.display = '';
    }

    // Determine whether they did NICE WORK or if they should TRY AGAIN
    if (points.points <= 0) {
        TweenMax.set('.end-text-try-again', { autoAlpha: 1 });
        TweenMax.set('.end-text-nice-work', { autoAlpha: 0 });
    } else {
        TweenMax.set('.end-text-try-again', { autoAlpha: 0 });
        TweenMax.set('.end-text-nice-work', { autoAlpha: 1 });
    }

    // Stop Driveway Animation
    roadLoopTL.stop();

    // Show endframe
    TweenMax.to('.end-frame', .5, { x: 0, ease: Power2.easeOut, delay: 1.5 });

    // Hide the message eventually
    TweenMax.delayedCall(5, hideProductMessage, [true]);

    // Hide the score & clock to help trigger fixes for mobile issues in Safari
    TweenMax.to('.score, .clock-container', .5, { y: -50, ease: Power1.easeOut });

    // Start autoPagination
    TweenMax.delayedCall(8, autoPaginate);

}

function autoPaginate() {
    if (autoScroll) {
        updateCarousel(currentProduct);
        currentProduct++
        if (currentProduct < 0) {
            currentProduct = 3;
        }
        if (currentProduct > 3) {
            currentProduct = 0;
        }
        TweenMax.delayedCall(3, autoPaginate)
    }
}

function hideProductMessage(aBoolean) {
    console.log("hideProductMessage")
    if (aBoolean) {
        TweenMax.to('.product-message', .5, { autoAlpha: 0, ease: Power2.easeInOut });
        TweenMax.delayedCall(.75, showProducts, [true]);
    } else {
        TweenMax.to('.product-message', .5, { autoAlpha: 1 });
        TweenMax.delayedCall(.75, showProducts, [false]);
    }
}

function showProducts(aBoolean) {
    console.log("showProducts")
    if (aBoolean) {
        TweenMax.to('.end-text-browse', .5, { autoAlpha: 1, ease: Power2.easeOut });
        TweenMax.to('.product', .5, { autoAlpha: 1, ease: Power2.easeOut, delay: .4 })
        TweenMax.to('.products-navigation', .5, { autoAlpha: 1, ease: Power2.easeOut, delay: .8 })
    } else {
        TweenMax.to('.end-text-browse', .5, { autoAlpha: 0 });
        TweenMax.to('.product', .5, { autoAlpha: 0 });
        TweenMax.to('.products-navigation', .5, { autoAlpha: 0 });
    }
}

function resetScore() {
    // Reset Score AFTER END FRAME slides off for REPLAY
    points = { points: 0, displayPoints: 0 }
    scoreDisplay.innerHTML = 0;
    scoreDisplay.innerText = 0; //Math.floor(points.displayPoints);
    scoreDisplay.style.display = 'none';
    scoreDisplay.style.offsetHeight;
    scoreDisplay.style.display = '';

    playAgainPointsDisplay.innerHTML = 0;
    playAgainPointsDisplay.innerText = 0; //Math.floor(points.displayPoints);
    playAgainPointsDisplay.style.display = 'none';
    playAgainPointsDisplay.style.offsetHeight;
    playAgainPointsDisplay.style.display = '';
}

function reset() {
    if (gameStarted) {
        return;
    }
    TweenMax.to('.end-frame', .75, { x: -300, ease: Power4.easeIn });
    // Enabler.counter('Replay Game', true);

    // Reset Points
    TweenMax.delayedCall(.75, resetScore);
    // Hide the Product Message
    TweenMax.delayedCall(.75, hideProductMessage, [false]);
    // Reset the Carousel back to the first product
    TweenMax.killDelayedCallsTo(autoPaginate);
    TweenMax.delayedCall(.75, updateCarousel, [0]);
    TweenMax.delayedCall(.75, updateNavigation, [0]);

    // Remove all Game Elements
    for (var i = 0; i < gameElements.length; i++) {
        var gm = gameElements[i];
        gm.remove();
    }
    gameElements = [];


    // Reset Player Positioning
    targetX = 254;
    TweenMax.set('.player', { x: targetX / 2, rotation: 0, transformOrigin: "50% 15px" });
    plowClearingSquare.x = targetX;


    // Restart Driveway Animation
    var i = trail.length
    while (i--) {
        var trailItem = trail[i];
        trail.splice(i, 1);
        maskThings.removeChild(trailItem);
        delete trailItem;
    }
    roadLoopTL.play();
    drivewayMaskStage.clear();

    // Replay the game!
    replayGame();
}

function replayGame() {
    console.log("replayGame")
    TweenMax.delayedCall(1, startTimer)
    TweenMax.fromTo('.arrows', .5, { autoAlpha: 0, y: 10 }, { autoAlpha: 1, y: 0, delay: 1 });
    TweenMax.fromTo('.score, .clock-container', .5, { y: -50 }, { y: 0, delay: 1, ease: Power1.easeOut });
    gameStarted = true;
    gameEnded = false;
    // startTimer();
}

function clearSnowCanvasStage() { // NOT WORKING
    for (var i = 0; i < snowCanvasStage.children.length; i++) {
        var iParticle = snowCanvasStage.children[i];
        snowCanvasStage.removeChild(iParticle);
        delete iParticle;
    }

    var cCount = snowCanvasStage.children.length;
    console.log("cCount", cCount)

}
// ---------- <START / FINISH> ---------- \\ 



// -------------- <GAME PLAY FUNCTIONS - END> -------------- \\


var carouselLeft;
var carouselRight;
var productsCarousel;
var productsNavigation;
var buttonsArray;

// setupCarousel();

function setupCarousel() {
    // console

    // if (!gameStarted && !gameEnded) {
    console.log("--> setupCarousel")

    productsCarousel = document.querySelector('.products-carousel');
    productsNavigation = document.querySelector('.products-navigation');
    productsArray = new Array();
    buttonsArray = new Array();

    for (var i = 0; i < 4; i++) {
        // PRODUCTS
        var newProduct = document.createElement('div');
        newProduct.classList.add('png-element');
        newProduct.classList.add('product');
        var newItereation = i + 1;
        var newClass = "product" + newItereation;
        newProduct.classList.add(newClass);
        TweenMax.set(newProduct, { x: i * 260, autoAlpha: 0 });
        switch (i) {
            case 0:
                newProduct.addEventListener(myEvent, function () {
                    autoScroll = false;
                    window.open("https://www.troybilt.com/en_US/two-stage-snow-blowers/storm-3090-snow-blower/31AH5DP5766.html", "_blank");
                    // Enabler.exit('product-slider-exit_storm-3090', 'https://www.google.com');
                    // Enabler.stopTimer('PlayingGame');
                });
                break;

            case 1:
                newProduct.addEventListener(myEvent, function () {
                    autoScroll = false;
                    window.open("https://www.troybilt.com/en_US/two-stage-snow-blowers/storm-2665-snow-blower/31AM6CP3723.html", "_blank");
                    // Enabler.exit('product-slider-exit_storm-2665', 'https://www.google.com');
                    // Enabler.stopTimer('PlayingGame');
                });
                break;

            case 2:
                newProduct.addEventListener(myEvent, function () {
                    autoScroll = false;
                    window.open("https://www.troybilt.com/en_US/single-stage-snow-blowers/squall-208e-snow-blower/31AS2T7G766.html", "_blank");
                    // Enabler.exit('product-slider-exit_squall-208e', 'https://www.google.com');
                    // Enabler.stopTimer('PlayingGame');
                });
                break;

            case 3:
                newProduct.addEventListener(myEvent, function () {
                    autoScroll = false;
                    window.open("https://www.troybilt.com/en_US/two-stage-snow-blowers/arctic-storm-30-snow-blower/31AH8DR5766.html", "_blank");
                    // Enabler.exit('product-slider-exit_arctic-storm-30', 'https://www.google.com');
                    // Enabler.stopTimer('PlayingGame');
                });
                break;
        }

        productsArray.push(newProduct);
        productsCarousel.appendChild(newProduct);

        // CIRCLE BUTTONS
        var newButton = document.createElement('div');
        newButton.classList.add('float');
        newButton.classList.add('carousel-button');
        newButton.classList.add('button');
        newClass = "carousel-button" + newItereation;
        newButton.classList.add(newClass);
        newButton.buttonType = newClass;
        if (i == 0) {
            newButton.classList.add("selected");
        }
        var newX = 17 + (i * 20);
        TweenMax.set(newButton, { x: newX });
        buttonsArray.push(newButton);
        productsNavigation.appendChild(newButton);
        newButton.addEventListener(myEvent, clickCarousel);
        // console.log("productsArray", productsArray)

    }
    TweenMax.set('.end-text-browse, .products-navigation', { autoAlpha: 0 });

    // ARROW BUTTONS
    carouselLeft = document.createElement('div');
    carouselLeft.classList.add('png-element');
    carouselLeft.classList.add('carousel-arrow');
    carouselLeft.classList.add('carousel-left');
    carouselLeft.classList.add('button');
    carouselLeft.buttonType = "carousel-left";
    carouselLeft.addEventListener(myEvent, clickCarousel);
    productsNavigation.appendChild(carouselLeft);

    carouselRight = document.createElement('div');
    carouselRight.classList.add('png-element');
    carouselRight.classList.add('carousel-arrow');
    carouselRight.classList.add('carousel-right');
    carouselRight.classList.add('button');
    carouselRight.buttonType = "carousel-right";
    carouselRight.addEventListener(myEvent, clickCarousel);
    productsNavigation.appendChild(carouselRight);
    // }
}

function openURL(aLink) {
    window.open(aLink, "_blank");
}

var currentProduct = 0;

function clickCarousel(e) {
    // WHICH button was pushed
    console.log(e.target.buttonType)
    autoScroll = false;
    TweenMax.killDelayedCallsTo(autoPaginate);

    switch (e.target.buttonType) {

        case "carousel-left":
            currentProduct -= 1;
            if (currentProduct < 0) {
                currentProduct = 3;
            }
            break;

        case "carousel-right":
            currentProduct += 1;
            if (currentProduct > 3) {
                currentProduct = 0;
            }
            break;

        case "carousel-button1":
            currentProduct = 0
            break;

        case "carousel-button2":
            currentProduct = 1
            break;

        case "carousel-button3":
            currentProduct = 2
            break;

        case "carousel-button4":
            currentProduct = 3
            break;
    }
    console.log("currentProduct: " + currentProduct)
    updateCarousel(currentProduct);
    // updateNavigation(currentProduct);
}

function updateCarousel(aNumber) {
    var newNumber = aNumber * -260;
    console.log("newNumber: " + newNumber)
    TweenMax.to(productsCarousel, 1, {
        x: newNumber,
        ease: Power2.easeInOut
    });
    updateNavigation(currentProduct);
}

function updateNavigation(aNumber) {
    for (var i = 0; i < buttonsArray.length; i++) {
        var iButton = buttonsArray[i];
        if (i == aNumber) {
            iButton.classList.add("selected")
        } else {
            iButton.classList.remove("selected")
        }
    }
}





//INTRO CTA BUTTON
//Roll Over
document.querySelector('.intro-cta-button').addEventListener('mouseover', function () {
    TweenMax.to('.intro-cta-button', .1, { backgroundColor: "#FFFFFF", ease: Power2.easeOut });
    TweenMax.to('.intro-cta-rollover', .1, { autoAlpha: 1, ease: Power2.easeOut });
});
//Roll Out  
document.querySelector('.intro-cta-button').addEventListener('mouseout', function () {
    TweenMax.to('.intro-cta-button', .25, { backgroundColor: "#000000", ease: Power2.easeOut });
    TweenMax.to('.intro-cta-rollover', .25, { autoAlpha: 0, ease: Power2.easeOut });
});
//Click
document.querySelector('.intro-cta-button').addEventListener(myEvent, function () {
    console.log("intro-cta-button is clicked")
    TweenMax.to('.start-frame', .75, { x: -300, ease: Power4.easeIn });
    // Enabler.counter('Game Started', true);
    // Enabler.startTimer('PlayingGame');
});



//MID CTA BUTTON
//Roll Over
document.querySelector('.mid-cta-button').addEventListener('mouseover', function () {
    TweenMax.to('.mid-cta-button', .1, { backgroundColor: "#FFFFFF", ease: Power2.easeOut });
    TweenMax.to('.mid-cta-rollover', .1, { autoAlpha: 1, ease: Power2.easeOut });
});
//Roll Out  
document.querySelector('.mid-cta-button').addEventListener('mouseout', function () {
    TweenMax.to('.mid-cta-button', .25, { backgroundColor: "#da0026", ease: Power2.easeOut });
    TweenMax.to('.mid-cta-rollover', .25, { autoAlpha: 0, ease: Power2.easeOut });
});
//Click
document.querySelector('.mid-cta-button').addEventListener(myEvent, function () {
    TweenMax.to('.mid-box', .75, { x: -300, ease: Power4.easeIn });
    TweenMax.to('.black-overlay', .75, { autoAlpha: 0, ease: Power2.easeOut, delay: 1, onComplete: startGame });
});


//END PLAY AGAIN BUTTON
//Roll Over
document.querySelector('.play-again-button').addEventListener('mouseover', function () {
    TweenMax.to('.play-again-button', .1, { backgroundColor: "#FFFFFF", ease: Power2.easeOut });
    TweenMax.to('.play-again-rollover', .1, { autoAlpha: 1, ease: Power2.easeOut });
});
//Roll Out  
document.querySelector('.play-again-button').addEventListener('mouseout', function () {
    TweenMax.to('.play-again-button', .25, { backgroundColor: "#000000", ease: Power2.easeOut });
    TweenMax.to('.play-again-rollover', .25, { autoAlpha: 0, ease: Power2.easeOut });
});
//Click
document.querySelector('.play-again-button').addEventListener(myEvent, function () {
    reset();
});


//END SHARE BUTTONS
//Roll Over
document.querySelector('.share-facebook').addEventListener('mouseover', function () {
    TweenMax.to('.share-facebook', .1, { backgroundColor: "#4267B2", ease: Power2.easeOut });
});

document.querySelector('.share-twitter').addEventListener('mouseover', function () {
    TweenMax.to('.share-twitter', .1, { backgroundColor: "#1DA1F2", ease: Power2.easeOut });
});


//Roll Out  
document.querySelector('.share-facebook').addEventListener('mouseout', function () {
    TweenMax.to('.share-facebook', .25, { backgroundColor: "#000000", ease: Power2.easeOut });
});

document.querySelector('.share-twitter').addEventListener('mouseout', function () {
    TweenMax.to('.share-twitter', .25, { backgroundColor: "#000000", ease: Power2.easeOut });
});

console.log(window.location)
//Click
document.querySelector('.share-facebook').addEventListener(myEvent, function () {
    var siteURL = `https://www.facebook.com/sharer/sharer.php?u=${encodeURI(window.location.href + "?score=" + points.points)}`;
    window.open(siteURL, '_blank');
});

document.querySelector('.share-twitter').addEventListener(myEvent, function () {
    var siteURL = `https://twitter.com/intent/tweet?url=${encodeURI(window.location.href + "?score=" + points.points)}`;
    window.open(siteURL, '_blank');
});



//FOOTER CTA ROLL-OVERS
document.querySelector('.cta-button').addEventListener('mouseover', function () {
    // TweenMax.to('.cta-button', .1, { backgroundColor: "#000000", ease: Power2.easeOut });
});

document.querySelector('.cta-button').addEventListener('mouseout', function () {
    // TweenMax.to('.cta-button', .25, { backgroundColor: "#ca0003", ease: Power2.easeOut });
});
//Click
document.querySelector('.cta-button').addEventListener(myEvent, function () {
    window.open("https://www.troybilt.com/en_US/snow-blowers", "_blank");
    // Enabler.exit('shop-now-footer-exit', 'https://www.google.com');
    // Enabler.stopTimer('PlayingGame');
});
